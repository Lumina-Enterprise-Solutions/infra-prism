# infra/.github/workflows/deploy-dev.yml (FINAL)

name: Deploy to Dev Server

on:
  push:
    branches:
    - main # Ganti dengan branch utama Anda jika perlu

jobs:
  deploy:
    name: Deploy to Development Environment
    runs-on: self-hosted # PENTING: Jalankan di runner yang ada di server dev Anda

    steps:
    - name: Checkout Repository
      uses: actions/checkout@v4

    - name: Log in to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GH_PAT }} # Secret berisi Personal Access Token

    - name: Create .env File from Secrets
      run: |
        echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
        echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
        echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
        echo "POSTGRES_HOST=db-postgres" >> .env
        echo "POSTGRES_PORT=5432" >> .env
        echo "VAULT_TOKEN=root-token-for-dev" >> .env
        echo "JAEGER_ENDPOINT=jaeger:4317" >> .env
        echo "VAULT_ADDR=http://vault:8200" >> .env
        echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env
        # Tambahkan variabel RabbitMQ
        echo "RABBITMQ_USER=guest" >> .env
        echo "RABBITMQ_PASS=guest" >> .env
        echo "RABBITMQ_HOST=rabbitmq" >> .env
        echo "RABBITMQ_URL=amqp://guest:guest@rabbitmq:5672/" >> .env
      shell: bash

    - name: Pull Latest Docker Images
      # Menarik image terbaru dari registry sebelum menjalankan compose
      run: docker compose -f docker-compose.prod.yml pull

    - name: Deploy Core & Monitoring Stacks
      run: |
        # Menggunakan `up -d` akan membuat atau memulai ulang container yang diubah
        docker compose -f docker-compose.prod.yml up -d --remove-orphans \
        --profile core --profile monitoring

    - name: Clean Up Old Docker Images
      # Membersihkan image yang tidak terpakai lagi (dangling) untuk menghemat ruang
      run: docker image prune -f

  # --- JOB BARU UNTUK E2E TEST ---
  e2e_test:
    name: Run End-to-End Tests
    needs: deploy # Job ini hanya berjalan JIKA job 'deploy' berhasil
    runs-on: self-hosted # Jalankan di server yang sama dengan environment yang di-deploy

    steps:
    - name: Checkout Repository
      # Checkout lagi diperlukan karena job ini berjalan di runner yang bersih
      uses: actions/checkout@v4

    - name: Run E2E Test Suite via Makefile
      # Jalankan target Makefile yang sudah kita siapkan
      run: make e2e-test

    - name: Upload E2E Test Report
      uses: actions/upload-artifact@v4
      if: always() # Selalu upload report, bahkan jika tes gagal untuk debugging
      with:
        name: e2e-test-report
        # Path di dalam runner tempat report disimpan oleh Makefile
        path: postman/e2e-report.xml
